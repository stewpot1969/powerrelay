
AVRA   Ver. 1.3.0 main.asm Sat Oct 22 15:13:28 2016


         
         ;  file to control a relay
         
          .list
         
         ; VOLTAGE LEVELS
         ; ADC result = 50.8*voltage - 2.39
          .define   V_HIGH            668     ; ~13.2V
          .define   V_LOW             617     ; ~12.2V
         
         ; temp reg for things
          .def  scratch = r23
         ; timer countdown for state changes etc
          .def  count   = r24
          .define   COUNT_PRE_ON      10   ; seconds of engine-on volts before bootup
          .define   COUNT_PRE_OFF     20    ; seconds from shutdown relay on to power off
          .define   COUNT_PRE_SHUT    180     ; secs of engine-off volts before shutdown
         
         ; prescaler for second counter
          .def  count2  = r25
          .define   COUNT2_PRESCALE   4
         
         ; state of the switch
          .def  state   = r26
          .define   STATE_IDLE        1   ; resting state
          .define   STATE_PRE_ON      2   ; engine started
          .define   STATE_ON          4   ; power on to Pi
          .define   STATE_PRE_SHUT    8   ; engine turned off, Pi still running
          .define   STATE_PRE_OFF     16  ; shutdown relay on, Pi shutting down
          .define   STATE_MANUAL      32  ; button has been pressed
         
         ; state of the voltage input
          .def  v_state = r27
          .define   V_STATE_SICK      1     ; <12.2V - battery getting down
          .define   V_STATE_OK        2     ; 12.2-13.2V  - engine off, battery OK
          .define   V_STATE_HIGH      4     ; >13.2V - engine running
          .define   V_STATE_BUTTON    8     ; button pushed
         
         
          .macro    set_output
              in    r16,DDR@0
              ori   r16,1<<@1
              out   DDR@0,r16
          .endm
          .macro    set_pullup
              in    r16,PORT@0
              ori   r16,1<<@1
              out   PORT@0,r16
          .endm
          .macro    set_high
              in    r16,PORT@0
              ori   r16,1<<@1
              out   PORT@0,r16
          .endm
          .macro    set_low
              in    r16,PORT@0
              andi  r16,255-(1<<@1)
              out   PORT@0,r16
          .endm
         
          .dseg
          .org  SRAM_START
         
         ; myval:    .byte 1
         
          .cseg
          .org          0x0000
         
         
          reset:
C:000000 e90f          ldi     r16,low(RAMEND)
C:000001 bf0d          out     SPL,r16
         
             ; setup I/O
             ; 1: _reset
             ; 2: PB3 - relay out
             ; 3: PB4 - 2nd relay?
             ; 4: GND
             ; 5: PB0 - button
             ; 6: PB1 - indicator LED
             ; 7: PB2 - ADC1 - sys V in
             ; 8: 5V
C:000002 e10a          ldi   r16,(1<<1)|(1<<3)|(1<<4)
C:000003 bb07          out   DDRB,r16
             ;set_output  B,1       ; PB1 LED out
             ;set_output  B,3       ; PB3 relay 1 out
             ;set_output  B,4       ; PB4 relay 2 out
C:000004   +      set_pullup  B,0       ; PB0 button pullup
C:000004 b308      in    r16,PORTB
C:000005 6001      ori   r16,1<<0
C:000006 bb08      out   PORTB,r16
         
             ; setup ADC (Vref=Vcc, /8 prescaler (125kHz))
             ; PB2 (ADC1), ADLAR=0
             
C:000007 e001          ldi     r16,1     ; Vref=Vcc, ADLAR=0, MUX1=1 (ADC1 PB2)
C:000008 b907          out     ADMUX,r16
             
C:000009 e803          ldi     r16,(1<<ADEN)+3 ; enable ADC, /8
C:00000a b906          out     ADCSRA,r16
             
             ; setup timer0
             ; compare output modes normal, WGM=CTC
C:00000b e002          ldi     r16,0b00000010
C:00000c bd0f          out     TCCR0A,r16
             ; WGM=CTC, clock prescaler = 1024
C:00000d e005          ldi     r16,0b00000101
C:00000e bf03          out     TCCR0B,r16
             ; overflow every 250 cycles = 0.5 seconds
C:00000f ef0a          ldi     r16,250
C:000010 bf06          out     OCR0A,r16
         
             ; prepare states and stuff for the loop
C:000011 ef8f          ldi     count,-1        ; timer off
C:000012 e0a1          ldi     state,STATE_IDLE    ; state=IDLE
C:000013 e094          ldi     count2,COUNT2_PRESCALE  ; load prescaler
         
          loop:
             
             ; step 1: wait for the interrupt flag to be set
C:000014 b708          in    r16,TIFR0
C:000015 ff02          sbrs  r16,OCF0A
C:000016 cffd          rjmp  loop
             
             ; step 2: clear interrupt flag
C:000017 e004          ldi   r16,1<<OCF0A
C:000018 bf08          out   TIFR0,r16
         
             ; step 3 - read ADC
C:000019 ec01          ldi     r16,(1<<ADEN)+(1<<ADSC)+1   ; start conversion
C:00001a b906          out     ADCSRA,r16
          wfadc:
C:00001b b106          in      r16,ADCSRA
C:00001c 7100          andi    r16,(1<<ADIF)     ; check if ADIF is set (ADC complete)
C:00001d f3e9          breq    wfadc
         
             ; step 4 - look at the voltage
C:00001e b104          in      r16,ADCL
C:00001f b115          in      r17,ADCH
C:000020 e92c          ldi     r18,low(V_HIGH)
C:000021 e032          ldi     r19,high(V_HIGH)
C:000022 1702          cp      r16,r18     ; subtract V_HIGH from ADC
C:000023 0713          cpc     r17,r19
C:000024 f010          brcs    s4_1    ; branch if ADC < V_HIGH
C:000025 e0b4          ldi     v_state,V_STATE_HIGH
C:000026 c008          rjmp    s5
          s4_1:
C:000027 e629          ldi     r18,low(V_LOW)
C:000028 e032          ldi     r19,high(V_LOW)
C:000029 1702          cp      r16,r18   ; subtract V_LOW from ADC
C:00002a 0713          cpc     r17,r19
C:00002b f010          brcs    s4_2      ; branch if ADC < V_LOW
C:00002c e0b2          ldi     v_state,V_STATE_OK
C:00002d c001          rjmp    s5
          s4_2:
C:00002e e0b1          ldi     v_state,V_STATE_SICK
             
             ; step 5  - check button, decrement timer prescaler and timer
          s5:
C:00002f b306          in    r16,PINB
C:000030 7001          andi  r16,1     ; check bit 0
C:000031 f409          brne  s5_1      ; PINB.0=1 = no button
C:000032 60b8          ori   v_state,V_STATE_BUTTON
          s5_1:
C:000033 959a          dec   count2
C:000034 f6f9          brne  loop      ; no prescale zero? All done for this time
C:000035 e094          ldi   count2,COUNT2_PRESCALE    ; reload prescaler
C:000036 3f8f          cpi   count,-1      ; count=-1 means counter not being used
C:000037 f009          breq  s6
C:000038 958a          dec   count
         
         
             ; step 6 - split out based on state
          s6:
C:000039 efea          ldi   ZL,low(calltable*2)
C:00003a e0f0          ldi   ZH,high(calltable*2)
          s6_1:
C:00003b 9105          lpm   r16,Z+    ; r16=V_STATE mask
C:00003c 2300          tst   r16
C:00003d f2b1          breq  loop      ; table ends in zero
C:00003e 9115          lpm   r17,Z+    ; r17=STATE mask
C:00003f 91c5          lpm   YL,Z+     ; save subroutine address in Y
C:000040 91d5          lpm   YH,Z+
C:000041 230b          and   r16,v_state   ; and v_state with v_state mask
C:000042 f3c1          breq  s6_1      ; no overlap? go to next entry in calltable
C:000043 231a          and   r17,state     ; now check state mask
C:000044 f3b1          breq  s6_1        ; no overlap? next entry
C:000045 2ffd          mov   ZH,YH       ; move Y to Z
C:000046 2fec          mov   ZL,YL
C:000047 9509          icall           ; call subroutine pointed to by Z
C:000048 cfcb          rjmp  loop    
         
         ;========================================================
         ; SUBROUTINES POINTED TO BY CALLTABLE:
         
          idleoff:    ; go into idle mode
C:000049 e0a1        ldi   state,STATE_IDLE
C:00004a ef8f        ldi   count,-1
C:00004b b308        in    r16,PORTB
C:00004c 7e05        andi  r16,0b11100101  ; 1,3,4 off = power,shutdown,LED
C:00004d bb08        out   PORTB,r16
C:00004e 9508        ret  
           
          preshut:    ; sets state=PRE_SHUT
C:00004f e0a8        ldi   state,STATE_PRE_SHUT
C:000050 eb84        ldi   count,COUNT_PRE_SHUT
C:000051 9508        ret
           
          preoff:   ;state=PRE_SHUT,Vok
C:000052 2388        tst   count     ; timer before setting shutdown relay
C:000053 f429        brne  preoff_2
C:000054 e1a0        ldi   state,STATE_PRE_OFF
C:000055 e184        ldi   count,COUNT_PRE_OFF
C:000056   +    set_high  B,3   ; shutdown relay on
C:000056 b308      in    r16,PORTB
C:000057 6008      ori   r16,1<<3
C:000058 bb08      out   PORTB,r16
          preoff_2:
C:000059 9508        ret
         
          timer_idle:     ; state=PRE_OFF,Vok
C:00005a 2388        tst   count     ; wait for timer to run out before going idle
C:00005b f409        brne  timer_idle_2
C:00005c dfec        rcall idleoff
          timer_idle_2:
C:00005d 9508        ret
         
          preon:      ; state=IDLE, Vhigh
C:00005e e0a2        ldi   state,STATE_PRE_ON
C:00005f e08a        ldi   count,COUNT_PRE_ON
C:000060 9508        ret
           
          pi_on:    ; turn the Pi on
C:000061 2388        tst   count   ; do nothing until timer runs out
C:000062 f441        brne  pi_on_2
C:000063 e0a4        ldi   state,STATE_ON
C:000064 ef8f        ldi   count,-1
C:000065   +    set_high  B,1   ; LED on
C:000065 b308      in    r16,PORTB
C:000066 6002      ori   r16,1<<1
C:000067 bb08      out   PORTB,r16
C:000068   +    set_high  B,4   ; Pi power on
C:000068 b308      in    r16,PORTB
C:000069 6100      ori   r16,1<<4
C:00006a bb08      out   PORTB,r16
          pi_on_2:
C:00006b 9508        ret
         
          cancel_shut:    ; goes from state preshut to state on i.e. engine restarts
C:00006c e0a4        ldi   state,STATE_ON
C:00006d ef8f        ldi   count,-1
C:00006e 9508        ret
         
          manual_on:
C:00006f   +    set_high  B,1   ; LED ON
C:00006f b308      in    r16,PORTB
C:000070 6002      ori   r16,1<<1
C:000071 bb08      out   PORTB,r16
C:000072   +    set_high  B,4   ; Pi power on
C:000072 b308      in    r16,PORTB
C:000073 6100      ori   r16,1<<4
C:000074 bb08      out   PORTB,r16
C:000075 e2a0        ldi   state,STATE_MANUAL
C:000076 e085        ldi   count,5
C:000077 9508        ret
         
          manual_off:
C:000078 3f8f        cpi   count,-1
C:000079 f411        brne  eomanualoff
C:00007a e080        ldi   count,0
C:00007b dfd6        rcall preoff
          eomanualoff:
C:00007c 9508        ret
         
          calltable:
            .db   V_STATE_BUTTON,STATE_IDLE
C:00007D 0801
              .dw manual_on
C:00007e 006f
            .db   V_STATE_BUTTON,STATE_MANUAL
C:00007F 0820
              .dw manual_off
C:000080 0078
            .db   V_STATE_SICK,STATE_PRE_ON|STATE_ON|STATE_PRE_SHUT|STATE_PRE_OFF
C:000081 011E
              .dw idleoff
C:000082 0049
            .db   V_STATE_OK,STATE_PRE_ON
C:000083 0202
              .dw idleoff
C:000084 0049
            .db   V_STATE_OK,STATE_ON
C:000085 0204
              .dw preshut
C:000086 004f
            .db   V_STATE_OK,STATE_PRE_SHUT
C:000087 0208
              .dw preoff    
C:000088 0052
            .db   V_STATE_OK,STATE_PRE_OFF
C:000089 0210
              .dw timer_idle    
C:00008a 005a
            .db   V_STATE_HIGH,STATE_IDLE
C:00008B 0401
              .dw preon
C:00008c 005e
            .db   V_STATE_HIGH,STATE_PRE_ON
C:00008D 0402
              .dw pi_on
C:00008e 0061
            .db   V_STATE_HIGH,STATE_PRE_SHUT
C:00008F 0408
              .dw cancel_shut
C:000090 006c
            .db   0,0
C:000091 0000
         ;################################################################
         


Segment usage:
   Code      :       146 words (292 bytes)
   Data      :         0 bytes
   EEPROM    :         0 bytes

Assembly completed with no errors.
